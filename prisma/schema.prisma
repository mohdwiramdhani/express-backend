generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Role {
  id     Int      @id @default(autoincrement())
  name   String   @unique @db.VarChar(50)
  User   User[]
  Member Member[]

  @@map("roles")
}

model User {
  id        Int      @id @default(autoincrement())
  username  String   @unique @db.VarChar(100)
  password  String   @db.VarChar(100)
  roleId    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  role    Role     @relation(fields: [roleId], references: [id])
  profile Profile?

  @@map("users")
}

model Profile {
  id          Int       @id @default(autoincrement())
  fullName    String?   @db.VarChar(255)
  nik         String?   @unique @db.VarChar(16)
  phoneNumber String?   @db.VarChar(20)
  address     String?   @db.Text
  dateOfBirth DateTime?
  userId      Int       @unique
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @default(now()) @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("profiles")
}

model Member {
  id        Int      @id @default(autoincrement())
  username  String   @unique @db.VarChar(100)
  password  String   @db.VarChar(100)
  roleId    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  role           Role           @relation(fields: [roleId], references: [id])
  member_profile MemberProfile?

  @@map("members")
}

model MemberProfile {
  id          Int       @id @default(autoincrement())
  fullName    String?   @db.VarChar(255)
  nik         String?   @unique @db.VarChar(16)
  phoneNumber String?   @db.VarChar(20)
  address     String?   @db.Text
  dateOfBirth DateTime?
  memberId    Int       @unique
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @default(now()) @updatedAt

  member Member @relation(fields: [memberId], references: [id], onDelete: Cascade)

  @@map("member_profiles")
}
